<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   backgroundColor="0x3f3f3f" 
					   width="1280" height="768" xmlns:local="*"					   
					   creationComplete="onCreationComplete(event)"
					   >
	<s:menu>
		<mx:FlexNativeMenu dataProvider="{nativeMenu}" labelField="@label" showRoot="false" itemClick="menuClickHandler(event)"/>
	</s:menu>
	<!--
	<fx:Style>
		@namespace "library://ns.adobe.com/flex/spark";
		WindowedApplication 
		{
			skinClass:ClassReference("spark.skins.spark.SparkChromeWindowedApplicationSkin");
		}
	</fx:Style>
	-->
	<fx:Declarations>
		<fx:XML format="e4x" id="nativeMenu"> 
			<root> 
				<menuitem label="File"> 
					<!--menuitem label="1" type="check" toggled="true"/> 
					<menuitem type="separator"/-->  				
					<menuitem label="New Session"/>
					<menuitem label="Load Session"/>
					<menuitem label="Save Session"/>
					<menuitem label="Load Video"/>
					<menuitem label="Export CSV"/>
					<!--menuitem label="SubMenuItem A-3"> 
					<menuitem label="Sub-SubMenuItem A-3-1"/> 
					<menuitem label="Sub-SubMenuItem A-3-2" enabled="false"/> 
					<menuitem label="Sub-SubMenuItem A-3-3"/> 
					</menuitem--> 
				</menuitem> 
			</root> 
		</fx:XML>   
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.display.BitmapData;
			import flash.events.Event;
			import flash.events.EventDispatcher;
			import flash.filesystem.File;
			import flash.net.FileReference;
			import flash.net.registerClassAlias;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.graphics.ImageSnapshot;
			
			import spark.events.RendererExistenceEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.media.MediaPlayerState;
			
			[Bindable] public var fileName:String;
			
			[Bindable] private var shots:ArrayCollection = new ArrayCollection();
			[Bindable] private var isEditing:Boolean = false;
			
			[Bindable] private var isVideoLoaded:Boolean = false;
			[Bindable] private var isConverting:Boolean = false;
			
			private var _file:File;
			private var _renderers:Vector.<SnapShotItemRenderer> = new Vector.<SnapShotItemRenderer>;
			private var _filename:String;
			private var _conversionLog:Vector.<String>
			private var _currentTime:Number;
			
			//private var _videoTool:VideoTool;
			
			registerClassAlias("CaptureVO", CaptureVO);
			registerClassAlias("flash.geom.Point", Point);
			
			protected function menuClickHandler(event:FlexNativeMenuEvent):void
			{
				if (event.label == 'Load Video') loadVideo();
				if (event.label == 'Export CSV') exportCSV(); 
				if (event.label == 'Save Session') saveSession();
				if (event.label == 'Load Session') loadSession();
				if (event.label == 'New Session') newSession();
			}
			
			private function loadVideo():void
			{	
				var converter:ConvertVideo = new ConvertVideo();
				converter.addEventListener(ConversionProgressEvent.CONVERSION_STARTED, onConversionStarted);
				converter.addEventListener(ConversionProgressEvent.CONVERSION_PROGRESS, onConversionProgress);
				converter.addEventListener(ConversionProgressEvent.CONVERSION_CANCELLED, onConversionCancelled);
				_conversionLog = new Vector.<String>;
				isConverting = true;
				/*
				if (!file) file = new File();
				file.addEventListener(Event.SELECT, openFile);
				file.browseForOpen("*.flv",[new FileFilter("videos","*.flv")]);
				*/
				/*
				_videoTool = new VideoTool(video.video);
				_videoTool.browseVideo();
				*/
			}
			
			private function saveSession():void
			{
				var vos:Vector.<CaptureVO> = new Vector.<CaptureVO>;
				for (var i:int = 0; i < shots.length; i++) {
					vos.push(shots.getItemAt(i));
				}
				var b:ByteArray = new ByteArray();
				b.writeObject(vos);
				var save:File = File.desktopDirectory.resolvePath("*.clx");//new File();
				var onSelected:Function = function(evt:Event):void {
					(evt.target as IEventDispatcher).removeEventListener(Event.SELECT, onSelected);
					var str:FileStream = new FileStream();
					str.openAsync(save, FileMode.WRITE);
					str.writeBytes(b);
				}
				save.addEventListener(Event.SELECT, onSelected);
				save.browseForSave("Save session");
			}
			
			private function newSession():void
			{
				shots = new ArrayCollection();
				isEditing = false;
			}
			
			private function loadSession():void
			{
				var load:FileReference = new FileReference();
				var onSelected:Function = function(evt:Event):void {
					(evt.target as IEventDispatcher).removeEventListener(Event.SELECT, onSelected);
					load.load();
				}
				var onCompleted:Function = function(evt:Event):void {
					(evt.target as IEventDispatcher).removeEventListener(Event.SELECT, onCompleted);
					var vos:Vector.<CaptureVO> = Vector.<CaptureVO>(load.data.readObject());
					shots = new ArrayCollection();
					for (var i:int = 0; i < vos.length; i++) {
						shots.addItem(vos[i]);
					}
					isVideoLoaded = true;
					return;
				}
				load.addEventListener(Event.SELECT, onSelected);
				load.addEventListener(Event.COMPLETE, onCompleted);
				load.browse([new FileFilter("CellX session","*.clx")]);
			}
			
			private function onConversionProgress(evt:ConversionProgressEvent):void
			{
				_conversionLog.push(evt.msg);
				logConversionMsg(evt.msg);
			}
			
			private function onConversionCancelled(evt:ConversionProgressEvent):void
			{
				isConverting = false;
			
			}
			
			private function onConversionStarted(evt:ConversionProgressEvent):void
			{
				(evt.target as EventDispatcher).removeEventListener(ConversionProgressEvent.CONVERSION_STARTED, onConversionStarted);
				(evt.target as EventDispatcher).addEventListener(ConversionProgressEvent.CONVERSION_COMPLETE, onConversionComplete);
				logConversionMsg('Converting video...');
				isConverting = true;
			}
			
			private function onConversionComplete(evt:ConversionProgressEvent):void
			{
				(evt.target as EventDispatcher).removeEventListener(ConversionProgressEvent.CONVERSION_COMPLETE, onConversionComplete);
				logConversionMsg('Conversion succesful');
				isConverting = false;
				openFile(evt.file);
			}
			
			private function exportCSV():void
			{
				var csv:String = 'name,timecode,length,calibrated\n';
				for (var i:int = 0; i < _renderers.length; i++) {
					var vo:CaptureVO = _renderers[i].vo;
					csv += '"'+vo.name+'",'+vo.timecode+','+vo.length;
					if (editor.calibrationVO) {
						csv+=','+(vo.length * (Number(editor.calibrationVO.calibration) / editor.calibrationVO.length) ).toFixed(4);
					}
					csv+='\n';
				}
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTF(csv);
				var fileRef:FileReference = new FileReference();
				//fileRef.addEventListener(Event.SELECT, onFileSelected); 
				fileRef.save(csv, "output.csv");

			}
			
			private function openFile(f:File):void//evt:Event):void
			{
				_file = f;
				video.source = f.url;
				fileName = f.name;
				video.play();
				isVideoLoaded = true;
			}
			
			private function snapshot():void
			{
				var bmd:BitmapData = ImageSnapshot.captureBitmapData(video);
				// why this doesn't work with net streams : http://stackoverflow.com/questions/5607047/how-can-i-use-bitmapdata-draw-with-netstream-appendbytes
				//var bmd:BitmapData = new BitmapData(.video.width, video.video.height);
				//bmd.draw(video.video);
				var tc:int = int(Math.floor( video.currentTime * 1000)),
					res:Point = new Point(video.width, video.height),
					//vo:CaptureVO = new CaptureVO(_videoTool.file.name+':'+tc, bmd, tc, res, _videoTool.file.name);		
					vo:CaptureVO = new CaptureVO(_file.name+':'+tc, bmd, tc, res, _file.name);		
					
				shots.addItem(vo);
				editor.data = vo;
				
				video.pause();
				selectVO(vo);
			}
			
			private function onSnapshotAdded(evt:RendererExistenceEvent):void
			{
				evt.renderer.addEventListener(MouseEvent.CLICK, onClickSnapshot);
				evt.renderer.addEventListener("delete", deleteRenderer);
				_renderers.push(evt.renderer);
			}
			
			private function onSnapshotRemoved(evt:RendererExistenceEvent):void
			{
				evt.renderer.removeEventListener(MouseEvent.CLICK, onClickSnapshot);
				evt.renderer.removeEventListener("delete", deleteRenderer);
				_renderers.splice(_renderers.indexOf(evt.renderer), 1);
			}

			private function deleteRenderer(evt:Event):void
			{
				var ssir:SnapShotItemRenderer = evt.target as SnapShotItemRenderer;
				if (!ssir) return;
				
				//_renderers.splice(_renderers.indexOf(renderer), 1);
				shots.removeItemAt(shots.getItemIndex(ssir.vo));
				isEditing = false;
			}
			
			protected function onClickVideo(event:MouseEvent):void
			{
				//if (video.isPlaying) video.pause() else video.play();
				if (video.playing) video.pause() else video.play();
			}
			
			private function onClickSnapshot(event:MouseEvent):void
			{
				var vo:CaptureVO = (event.currentTarget as SnapShotItemRenderer).vo;
				if (!vo) return;
				selectVO(vo);
				video.seek(vo.timecode/1000);
			}
			
			private function selectVO(vo:CaptureVO):void
			{
				for (var i:int = 0; i < _renderers.length; i++) {
					if (_renderers[i].vo == vo) _renderers[i].isSelected = true;
					else _renderers[i].isSelected = false;
				}
				editor.data = vo;				
				isEditing = true;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				video.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, onVideoStateChange);
				video.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onVideoPOsitionChanged);

			}
			
			protected function onVideoPOsitionChanged(event:TimeEvent):void
			{
				currentTime = video.currentTime;
			}
			
			protected function onVideoTimeChange(event:TimeEvent):void
			{
				currentTime = event.time;
			}
			
			[Bindable(event="currentTimeChanged")] public function get currentTime():Number
			{
				return _currentTime;
			}
			
			public function set currentTime(value:Number):void
			{
				_currentTime = value;
				dispatchEvent(new Event("currentTimeChanged"));
			}
			
			protected function incFrame(evt:Event):void
			{
				//if (video.isPlaying) return;
				if (video.playing) return;
				currentTime += 0.04;
				video.seek(currentTime);
			}
			
			protected function decFrame(evt:Event):void
			{
				//if (video.isPlaying) return;
				if (video.playing) return;
				currentTime -= 0.04;
				video.seek(currentTime);
			}
			
			protected function onVideoStateChange(event:MediaPlayerStateChangeEvent):void
			{
				if (event.state == MediaPlayerState.PAUSED) {
					video.removeEventListener(TimeEvent.CURRENT_TIME_CHANGE, onVideoTimeChange);
				} else {
					video.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onVideoTimeChange);
				}
			}
			
		]]>
	</fx:Script>

	<s:VGroup variableRowHeight="true" width="100%" height="100%" horizontalAlign="center">
		
		<s:Group width="95%" horizontalCenter="0" height="55" visible="{Boolean(video.duration)}" >
			<local:IconButton url="assets/back.png" click="{ selectVO(null); isEditing = false;}" visible="{isEditing}" bottom="0" />
			
			<s:HGroup width="100%" height="100%" visible="{!isEditing}" includeInLayout="{!isEditing}" variableColumnWidth="true" horizontalCenter="0" verticalCenter="0" verticalAlign="bottom">
				<local:IconButton url="assets/snapshot.png" click="snapshot()" label="Grab frame" visible="{video.duration &amp;&amp; !video.playing &amp;&amp; !isEditing}" includeInLayout="{!isEditing}" />
				<local:IconButton url="{video.playing ? 'assets/pause.png' : 'assets/play.png'}" click="{if (video.playing) video.pause() else video.play()}" useHandCursor="true"/>
				<local:IconButton url="assets/nudge-back.png" click="decFrame(event)"/>
				<s:Label color="white" text="{currentTime.toFixed(3)}s" fontSize="26" width="100" />
				<local:IconButton url="assets/nudge-forward.png" click="incFrame(event)"/>
				<local:VideoScrub id="scrub" videoDisplay="{video}" stepSize="0.01" maximum="{video.duration}" width="100%"/>
				<s:Label color="white" text="{fileName}" right="0"/>				
			</s:HGroup>
		</s:Group>
		
		<mx:Spacer height="10"/>
		
		<s:Group height="100%" width="100%" >	
			<s:Group id="displayGroup" width="100%" height="100%" clipAndEnableScrolling="true">
				<s:Group id="display" horizontalCenter="0" >
					<s:VideoDisplay id="video" visible="{!isEditing}" click="onClickVideo(event)" width="{video.videoObject.videoWidth}" height="{video.videoObject.videoHeight}"/>
					<local:MeasurementComponent width="{video.videoObject.videoWidth}" height="{video.videoObject.videoHeight}" visible="{isEditing}" id="editor" clipAndEnableScrolling="true">
					</local:MeasurementComponent>
				</s:Group>				
			</s:Group>
			<s:VScrollBar viewport="{displayGroup}" right="0" height="100%"/>
		</s:Group>
		
		<s:Group width="100%" bottom="0" visible="{!isEditing}" includeInLayout="{!isEditing}">
			<s:Rect width="100%" height="100%" alpha="0.5">
				<s:fill>
					<s:SolidColor color="0"/>
				</s:fill>
			</s:Rect>		
			<s:Scroller id="scrl" left="40" right="40" height="125" bottom="10" top="10">
				<s:DataGroup id="shotBrowser" height="100%" dataProvider="{shots}" itemRenderer="SnapShotItemRenderer"
							 rendererAdd="onSnapshotAdded(event)" rendererRemove="onSnapshotRemoved(event)" >
					<s:layout>
						<s:HorizontalLayout verticalAlign="top" />
					</s:layout>
				</s:DataGroup>
			</s:Scroller>
		</s:Group>
		
	</s:VGroup>

	
	<s:Button width="200" height="100" label="Load a Video" click="{loadVideo()}" visible="{!isVideoLoaded}"  horizontalCenter="0" verticalCenter="0"/>
	
	
	<!-- Conversion Log Panel -->
	<fx:Declarations>
		<local:Boolean id="scrollerMd"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[			
			private function logConversionMsg(msg:String):void
			{
				if (!_conversionLog) _conversionLog = new Vector.<String>;
				_conversionLog.push(msg);
				var text:String = '';
				for (var i:int = 0; i < _conversionLog.length; i++) {
					text += _conversionLog[i] + "\n";
				}
				conversionMsg.text = text;
			}
		]]>
	</fx:Script>
	<s:Group horizontalCenter="0" verticalCenter="0" width="500" height="300" visible="{isConverting}" >
		<s:Rect width="100%" height="100%">
			<s:fill><mx:SolidColor color="0x999999"/> </s:fill>
		</s:Rect>
		<s:Scroller id="logScroller" width="100%" height="100%" enterFrame="{if (!scrollerMd) logScroller.verticalScrollBar.value = logScroller.verticalScrollBar.maximum;}" mouseDown="{scrollerMd = true;}" mouseUp="{scrollerMd = false;}">
			<s:Group id="conversionLog" left="50" right="50" top="20">
				<s:Label id="conversionMsg" left="50" right="50" top="20" color="0" />
			</s:Group>
		</s:Scroller>
	</s:Group >
	

</s:WindowedApplication>
