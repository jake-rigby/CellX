<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   backgroundColor="0" width="1000" height="700" xmlns:local="*" creationComplete="onCreationComplete(event)">
	
	<s:menu>
		<mx:FlexNativeMenu dataProvider="{nativeMenu}" labelField="@label" showRoot="false" itemClick="menuClickHandler(event)"/>
	</s:menu>
	
	<fx:Declarations>
		<fx:XML format="e4x" id="nativeMenu"> 
			<root> 
				<menuitem label="File"> 
					<!--menuitem label="1" type="check" toggled="true"/> 
					<menuitem type="separator"/-->      
					<menuitem label="Load"/>
					<menuitem label="Export CSV"/>
					<!--menuitem label="SubMenuItem A-3"> 
					<menuitem label="Sub-SubMenuItem A-3-1"/> 
					<menuitem label="Sub-SubMenuItem A-3-2" enabled="false"/> 
					<menuitem label="Sub-SubMenuItem A-3-3"/> 
					</menuitem--> 
				</menuitem> 
			</root> 
		</fx:XML>   
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.graphics.ImageSnapshot;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.media.MediaPlayerState;
			
			import spark.events.RendererExistenceEvent;
			
			[Bindable] public var fileName:String;
			[Bindable] public var currentTime:Number;
			
			[Bindable] private var shots:ArrayCollection = new ArrayCollection();
			[Bindable] private var isEditing:Boolean = false;
			
			private var file:File;
			private var _renderers:Vector.<SnapShotItemRenderer> = new Vector.<SnapShotItemRenderer>;
			private var _filename:String;
			
			
			protected function menuClickHandler(event:FlexNativeMenuEvent):void
			{
				if (event.label == 'Load') loadVideo();
				if (event.label == 'Export CSV') exportCSV(); 
			}
			
			private function loadVideo():void
			{
				if (!file) file = new File();
				file.addEventListener(Event.SELECT, openFile);
				file.browseForOpen("*.flv",[new FileFilter("videos","*.flv")]);
			}
			
			private function exportCSV():void
			{
				var csv:String = 'name,timecode,length,calibrated\n';
				for (var i:int = 0; i < _renderers.length; i++) {
					var vo:CaptureVO = _renderers[i].vo;
					csv += '"'+vo.name+'",'+vo.timecode+','+vo.length;
					if (editor.calibrationVO) {
						csv+=','+(vo.length * (Number(editor.calibrationVO.calibration) / editor.calibrationVO.length) ).toFixed(4);
					}
					csv+='\n';
				}
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTF(csv);
				var fileRef:FileReference = new FileReference();
				//fileRef.addEventListener(Event.SELECT, onFileSelected); 
				fileRef.save(csv, "output.csv");

			}
			
			private function openFile(evt:Event):void
			{
				video.source = file.url;
				fileName = file.name;
				video.play();
			}
			
			private function snapshot():void
			{
				var bmd:BitmapData = ImageSnapshot.captureBitmapData(video),
					tc:int = int(Math.floor(video.currentTime * 1000)),
					res:Point = new Point(video.videoObject.width, video.videoObject.height),
					vo:CaptureVO = new CaptureVO(file.name+':'+tc, bmd, tc, res, file.name);		
					
				shots.addItem(vo);
				editor.data = vo;
				
				video.pause();
				selectVO(vo);
			}
			
			private function onSnapshotAdded(evt:RendererExistenceEvent):void
			{
				evt.renderer.addEventListener(MouseEvent.CLICK, onClickSnapshot);
				_renderers.push(evt.renderer);
			}
			
			private function onSnapshotRemoved(evt:RendererExistenceEvent):void
			{
				evt.renderer.removeEventListener(MouseEvent.CLICK, onClickSnapshot);
				_renderers.splice(_renderers.indexOf(evt.renderer), 1);
			}

			
			protected function onClickVideo(event:MouseEvent):void
			{
				if (video.playing) video.pause() else video.play();
			}
			
			private function onClickSnapshot(event:MouseEvent):void
			{
				var vo:CaptureVO = (event.currentTarget as SnapShotItemRenderer).vo;
				if (!vo) return;
				selectVO(vo);
				video.seek(vo.timecode/1000);
			}
			
			private function selectVO(vo:CaptureVO):void
			{
				
				for (var i:int = 0; i < _renderers.length; i++) {
					if (_renderers[i].vo == vo) _renderers[i].isSelected = true;
					else _renderers[i].isSelected = false;
				}
				editor.data = vo;				
				isEditing = true;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				video.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, onVideoStateChange);
			}
			
			protected function onVideoTimeChange(event:TimeEvent):void
			{
				currentTime = event.time;
			}
			
			protected function incFrame(evt:Event):void
			{
				if (video.playing) return;
				currentTime += 0.1;
				video.seek(currentTime);
			}
			
			protected function decFrame(evt:Event):void
			{
				if (video.playing) return;
				currentTime -= 0.1;
				video.seek(currentTime);
			}
			
			protected function onVideoStateChange(event:MediaPlayerStateChangeEvent):void
			{
				if (event.state == MediaPlayerState.PAUSED) {
					video.removeEventListener(TimeEvent.CURRENT_TIME_CHANGE, onVideoTimeChange);
				} else {
					video.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onVideoTimeChange);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Button width="200" height="100" label="Load a Video" click="{loadVideo()}" horizontalCenter="0" verticalCenter="0" visible="{!Boolean(video.duration)}" includeInLayout="{!Boolean(video.duration)}"/>
	
	<s:HGroup width="100%" height="100%" variableColumnWidth="true">
		
		<s:Scroller id="scrl" width="200" height="100%">		
			<s:DataGroup id="shotBrowser" height="100%" dataProvider="{shots}" itemRenderer="SnapShotItemRenderer"
						 rendererAdd="onSnapshotAdded(event)" rendererRemove="onSnapshotRemoved(event)" >
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
			</s:DataGroup>
		</s:Scroller>
		
		<s:VGroup width="100%" height="100%">
			<s:Group id="display">
				<s:VideoDisplay id="video" visible="{!isEditing}" click="onClickVideo(event)" width="{video.videoObject.videoWidth}" height="{video.videoObject.videoHeight}"/>
				<local:MeasurementComponent width="100%" height="100%" visible="{isEditing}" id="editor" clipAndEnableScrolling="true"/>
			</s:Group>
			<s:HGroup width="{display.width}" visible="{!isEditing &amp;&amp; video.duration}" variableColumnWidth="true">
				<s:Label color="white" click="{if (video.playing) video.pause() else video.play()}" useHandCursor="true" text="{video.playing ?'||':'►'}" width="30" fontSize="25"/>
				<s:Label color="white" text="◄" click="decFrame(event)"/>
				<s:Label color="white" text="{currentTime.toFixed(3)}s"/>
				<s:Label color="white" text="►" click="incFrame(event)"/>
				<local:VideoScrub videoDisplay="{video}" stepSize="0.01" maximum="{video.duration}" width="100%"/>
				<s:Label color="white" text="{fileName}" right="0"/>				
			</s:HGroup>
			<s:HGroup verticalAlign="bottom" height="30">
				<s:Button click="snapshot()" label="Grab frame" visible="{video.duration &amp;&amp; !video.playing &amp;&amp; !isEditing}" includeInLayout="{!isEditing}" height="100%"/>
				<s:Button click="{ selectVO(null); isEditing = false;}" label="Back to capture" visible="{isEditing}" includeInLayout="{isEditing}" height="100%"/>
			</s:HGroup>			
		</s:VGroup>
		
	</s:HGroup>

</s:WindowedApplication>
