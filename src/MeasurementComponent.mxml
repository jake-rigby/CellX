<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 mouseDown="onCanvasMouseDown(event)" 
		 mouseUp="onCanvasMouseUp(event)"
		 enterFrame="onEnterFrame(event)"
		 rollOut="onCanvasRollOut(event)" >
	
	<fx:Metadata>
		[Event(name="isCalibrationChange", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			public static const IS_CALIBRATION_CHANGE:String = "isCalibrationChange";
			
			private var points:Vector.<Point> = new Vector.<Point>();
			private var hoverPoint:int = -1;
			private var pointEditMode:Boolean = false;
			
			[Bindable] public var calibrationVO:CaptureVO;
			[Bindable] public var vo:CaptureVO;
			[Bindable] public var isCalibration:Boolean = false;
			
				
			public function set data(vo:CaptureVO):void
			{
				this.vo = vo;
				if (!vo) return;
				bi.source = vo.bmd;
				points = vo.points;
				width = vo.bmd.width;
				height = vo.bmd.height;
			}
			
			public function get requestedCalibrationState():Boolean
			{
				return isCalibrationCheck.selected;
			}
			
			public function segmentDistToPoint(segA:Point, segB:Point, p:Point):Number
			{
				var p2:Point = new Point(segB.x - segA.x, segB.y - segA.y);
				var something:Number = p2.x*p2.x + p2.y*p2.y;
				var u:Number = ((p.x - segA.x) * p2.x + (p.y - segA.y) * p2.y) / something;
				
				if (u > 1)
					u = 1;
				else if (u < 0)
					u = 0;
				
				var x:Number = segA.x + u * p2.x;
				var y:Number = segA.y + u * p2.y;
				
				var dx:Number = x - p.x;
				var dy:Number = y - p.y;
				
				var dist:Number = Math.sqrt(dx*dx + dy*dy);
				
				return dist;
			}
			
			private function onEnterFrame(event:Event):void
			{
				draw();
			}
			
			private function draw():void
			{
				var mpt:Point = new Point(canvas.mouseX, canvas.mouseY);
				var snap:Boolean = false;
				canvas.graphics.clear();
				
				if (!pointEditMode) hoverPoint = -1;
				for (var i:int = 0; i < points.length; i++) {

					if (pointEditMode && i == hoverPoint) {
						
						points[i].x = canvas.mouseX;
						points[i].y = canvas.mouseY;
					}

					// line from last point to this one
					if (i > 0) {
						
						// distance from the mouse point to this line
						var d:Number = segmentDistToPoint(points[i-1], points[i], mpt);
						
						if (d < 10) {
							canvas.graphics.lineStyle(1, 0x00ff00);
							snap = true;
						} else {
							canvas.graphics.lineStyle(1, 0x0000ff);
						}
						
						canvas.graphics.moveTo(points[i-1].x, points[i-1].y);
						canvas.graphics.lineTo(points[i].x, points[i].y);
					}
					
					// this point
					if (mpt.subtract(points[i]).length <= 8 && !pointEditMode) {
						hoverPoint = i;
						canvas.graphics.lineStyle(1,0xff0000);
					}
					else canvas.graphics.lineStyle(1,0xffff00);
					canvas.graphics.drawCircle(points[i].x, points[i].y, 8);
				}

				if (vo) lengthLbl.text = 'length '+vo.length.toFixed(4);
				if (vo && calibrationVO) calibLengthLbl.text = 'calibrated length ' + (vo.length * (Number(calibrationVO.calibration) / calibrationVO.length) ).toFixed(4);
			}
			
			protected function onCanvasMouseDown(evt:MouseEvent):void
			{
				var mpt:Point = new Point(canvas.mouseX, canvas.mouseY);
				if (hoverPoint > -1) pointEditMode = true;
				else {
					// find the closest line to the click point, if below snap threshold, add another point there
					for (var i:int = 1; i < points.length; i++) {
						
						var d:Number = segmentDistToPoint(points[i-1], points[i], mpt);						
						if (d < 10) break;
					}
					
					// if we broke before checking all lines, we need to insert a new one
					if (i < points.length) {
						
						points.splice(i, 0, new Point(evt.localX, evt.localY));
						hoverPoint = i;
						pointEditMode = true;
						return;
					}
					
					// add a point if we got here
					points.push(new Point(evt.localX, evt.localY));
					hoverPoint = points.length - 1;
					pointEditMode = true;
					draw();
				}
			}
										
			protected function onCanvasMouseUp(evt:MouseEvent):void
			{
				pointEditMode = false;
			}
			
			protected function onCanvasRollOut(evt:MouseEvent):void
			{
				if (pointEditMode) {
					points.splice(hoverPoint,1);
					pointEditMode = false;
				}
			}

			
			protected function onChangeCalibration(event:Event):void
			{
				var evt:Event = new Event(IS_CALIBRATION_CHANGE);
				dispatchEvent(evt);
				if (isCalibrationCheck.selected) {
					calibrationVO = vo;
				} else if (calibrationVO == vo) {
					calibrationVO = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup>
			
		<s:Group>
			<s:BitmapImage id="bi"/>
			<mx:UIComponent id="canvas" width="100%" height="100%" />
		</s:Group>
		
		<s:HGroup verticalAlign="middle" bottom="5" left="5" click="{event.stopPropagation()}" mouseDown="{event.stopPropagation()}" opaqueBackground="true">
			<s:Label color="white" text="timecode {vo.timecode}"/>
			<s:Label color="white" text="source {vo.source}"/>
			<s:Label color="white" text="resolution {vo.nativeResolution}"/>
			<s:Label color="white" id="lengthLbl"/>
			<s:Label color="white" id="calibLengthLbl"/>

		</s:HGroup>
		
		<s:HGroup top="5" right="5" left="5" verticalAlign="middle" click="{event.stopPropagation()}" mouseDown="{event.stopPropagation()}" variableColumnWidth="true">
			<s:TextInput text="@{vo.name}" top="5" left="5" width="100%" />
			<s:Label visible="{calibrationVO == vo}" color="white" text="calibration value"/>
			<s:TextInput id="calibInput" visible="{calibrationVO == vo}" text="@{calibrationVO.calibration}" />
			<s:CheckBox id="isCalibrationCheck" selected="{calibrationVO == vo}" change="onChangeCalibration(event)" />
			<s:Label color="white" text="use as calibration" />
		</s:HGroup>

	</s:VGroup>
	
</s:Group>
