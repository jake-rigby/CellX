<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationComplete(event)" click="onCanvasClick(event)" enterFrame="onEnterFrame(event)" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import spark.primitives.Rect;
			
			private var points:Vector.<Point> = new Vector.<Point>();
			private var editPoint:int = -1;
			private var isEditing:Boolean = true;
			private var _bmd:BitmapData;
			
			[Bindable] private var length:Number;
				
			private function onCreationComplete(evt:Event):void
			{
				
			}
			
			private function onEnterFrame(event:Event):void
			{
				draw();
			}
			
			private function draw():void
			{
				length = 0;
				canvas.graphics.clear();
				for (var i:int = 0; i < points.length; i++) {
					
					// line from last point to this one
					if (i > 0) {
						canvas.graphics.lineStyle(1, 0x0000ff);
						canvas.graphics.moveTo(points[i-1].x, points[i-1].y);
						canvas.graphics.lineTo(points[i].x, points[i].y);
						
						length += points[i].subtract(points[i-1]).length;
					}
					
					// this point
					drawPoint(points[i].x, points[i].y);
				}
				
				if (isEditing && i && i > -1) {
					canvas.graphics.moveTo(points[i-1].x, points[i-1].y);					
					canvas.graphics.lineTo(mouseX, mouseY);
				}
			}
			
			private function drawPoint(x:int, y:int):void
			{
				canvas.graphics.lineStyle(1,0xffff00);
				/*
				var s:int = 4;
				canvas.graphics.moveTo(x - s, y - s);
				canvas.graphics.lineTo(x + s, y - s);
				canvas.graphics.lineTo(x + s, y + s);
				canvas.graphics.lineTo(x - s, y + s);
				canvas.graphics.lineTo(x - s, y - s);
				*/
				canvas.graphics.drawCircle(x, y, 8);
			}
			
			protected function onCanvasClick(event:MouseEvent):void
			{
				points.push(new Point(event.localX, event.localY));
				draw();
			}

			[Bindable (event="bmdUpdated")] public function get bmd():BitmapData
			{
				return _bmd;
			}

			public function set bmd(value:BitmapData):void
			{
				_bmd = value;
				dispatchEvent("bmdUpdated");
			}

			
		]]>
	</fx:Script>
	
	<s:BitmapImage width="100%" height="100%" source="{bmd}"/>
	<mx:UIComponent id="canvas" width="100%" height="100%"/>
	<s:Label color="white" text="{length}" />
	
</s:Group>
